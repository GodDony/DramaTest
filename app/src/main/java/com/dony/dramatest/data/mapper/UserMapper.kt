package com.dony.dramatest.data.mapper

import com.dony.dramatest.data.local.entity.UserEntity
import com.dony.dramatest.data.remote.response.UserResponse
import com.dony.dramatest.domain.model.User
import com.dony.dramatest.presentation.model.UserModel

/**
 * Remote
 */
fun UserResponse.toDomain() = User(
    login = login,
    id = id,
    node_id = node_id,
    avatar_url = avatar_url,
    gravatar_id = gravatar_id,
    public_repos = public_repos,
    public_gists = public_gists,
    followers = followers,
    following = following,
    url = url,
    html_url = html_url,
    followers_url = followers_url,
    following_url = following_url,
    gists_url = gists_url,
    starred_url = starred_url,
    subscriptions_url = subscriptions_url,
    organizations_url = organizations_url,
    repos_url = repos_url,
    events_url = events_url,
    received_events_url = received_events_url,
    type = type,
    site_admin = site_admin,
    name = name,
    company = company,
    blog = blog,
    location = location,
    email = email,
    hireable = hireable,
    bio = bio,
    twitter_username = twitter_username,
    created_at = created_at,
    updated_at = updated_at
)

/**
 * Local
 */
fun UserEntity.toDomain() = User(
    login = login,
    id = id,
    node_id = node_id,
    avatar_url = avatar_url,
    gravatar_id = gravatar_id,
    public_repos = public_repos,
    public_gists = public_gists,
    followers = followers,
    following = following,
    url = url,
    html_url = html_url,
    followers_url = followers_url,
    following_url = following_url,
    gists_url = gists_url,
    starred_url = starred_url,
    subscriptions_url = subscriptions_url,
    organizations_url = organizations_url,
    repos_url = repos_url,
    events_url = events_url,
    received_events_url = received_events_url,
    type = type,
    site_admin = site_admin,
    name = name,
    company = company,
    blog = blog,
    location = location,
    email = email,
    hireable = hireable,
    bio = bio,
    twitter_username = twitter_username,
    created_at = created_at,
    updated_at = updated_at
)

fun UserEntity.toPresentation() = UserModel(
    login = login,
    id = id,
    node_id = node_id,
    avatar_url = avatar_url,
    gravatar_id = gravatar_id,
    public_repos = public_repos,
    public_gists = public_gists,
    followers = followers,
    following = following,
    url = url,
    html_url = html_url,
    followers_url = followers_url,
    following_url = following_url,
    gists_url = gists_url,
    starred_url = starred_url,
    subscriptions_url = subscriptions_url,
    organizations_url = organizations_url,
    repos_url = repos_url,
    events_url = events_url,
    received_events_url = received_events_url,
    type = type,
    site_admin = site_admin,
    name = name,
    company = company,
    blog = blog,
    location = location,
    email = email,
    hireable = hireable,
    bio = bio,
    twitter_username = twitter_username,
    created_at = created_at,
    updated_at = updated_at
)

/**
 * Domain
 */

fun User.toPresentation() = UserModel(
    login = login,
    id = id,
    node_id = node_id,
    avatar_url = avatar_url,
    gravatar_id = gravatar_id,
    public_repos = public_repos,
    public_gists = public_gists,
    followers = followers,
    following = following,
    url = url,
    html_url = html_url,
    followers_url = followers_url,
    following_url = following_url,
    gists_url = gists_url,
    starred_url = starred_url,
    subscriptions_url = subscriptions_url,
    organizations_url = organizations_url,
    repos_url = repos_url,
    events_url = events_url,
    received_events_url = received_events_url,
    type = type,
    site_admin = site_admin,
    name = name,
    company = company,
    blog = blog,
    location = location,
    email = email,
    hireable = hireable,
    bio = bio,
    twitter_username = twitter_username,
    created_at = created_at,
    updated_at = updated_at
)

fun User.toEntity() = UserEntity(
    login = login,
    id = id,
    node_id = node_id,
    avatar_url = avatar_url,
    gravatar_id = gravatar_id,
    public_repos = public_repos,
    public_gists = public_gists,
    followers = followers,
    following = following,
    url = url,
    html_url = html_url,
    followers_url = followers_url,
    following_url = following_url,
    gists_url = gists_url,
    starred_url = starred_url,
    subscriptions_url = subscriptions_url,
    organizations_url = organizations_url,
    repos_url = repos_url,
    events_url = events_url,
    received_events_url = received_events_url,
    type = type,
    site_admin = site_admin,
    name = name,
    company = company,
    blog = blog,
    location = location,
    email = email,
    hireable = hireable,
    bio = bio,
    twitter_username = twitter_username,
    created_at = created_at,
    updated_at = updated_at
)

/**
 * Presentation
 */
fun UserModel.toDomain() = User(
    login = login,
    id = id,
    node_id = node_id,
    avatar_url = avatar_url,
    gravatar_id = gravatar_id,
    public_repos = public_repos,
    public_gists = public_gists,
    followers = followers,
    following = following,
    url = url,
    html_url = html_url,
    followers_url = followers_url,
    following_url = following_url,
    gists_url = gists_url,
    starred_url = starred_url,
    subscriptions_url = subscriptions_url,
    organizations_url = organizations_url,
    repos_url = repos_url,
    events_url = events_url,
    received_events_url = received_events_url,
    type = type,
    site_admin = site_admin,
    name = name,
    company = company,
    blog = blog,
    location = location,
    email = email,
    hireable = hireable,
    bio = bio,
    twitter_username = twitter_username,
    created_at = created_at,
    updated_at = updated_at
)